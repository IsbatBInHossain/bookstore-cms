// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


// ----------------------------------------
// Core User & Authentication Models
// ----------------------------------------

model User {
  id           String   @id @default(cuid())
  email        String   @unique
  passwordHash String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  roleId String
  role   Role   @relation(fields: [roleId], references: [id])

  profile       UserProfile?
  refreshTokens RefreshToken[]

  @@map("users")
}

model UserProfile {
  id        String   @id @default(cuid())
  firstName String
  lastName  String?
  phone     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userId String @unique
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_profiles")
}

model RefreshToken {
  id        String   @id @default(cuid())
  tokenHash String   @unique
  expiresAt DateTime
  ipAddress String?
  userAgent String?
  createdAt DateTime @default(now())

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("refresh_tokens")
}

// ----------------------------------------
// RBAC (Role-Based Access Control) Models
// ----------------------------------------

model Role {
  id          String   @id @default(cuid())
  name        String   @unique // e.g., "CUSTOMER", "ADMIN", "MANAGER"
  description String?
  createdAt   DateTime @default(now())

  users       User[]
  permissions RolePermission[]

  @@map("roles")
}

model Permission {
  id          String   @id @default(cuid())
  action      String   // e.g., "create", "read", "update", "delete"
  subject     String   // e.g., "book", "user", "order"
  description String?
  createdAt   DateTime @default(now())

  roles RolePermission[]

  @@unique([action, subject])
  @@map("permissions")
}

// Many-to-Many join table for Roles and Permissions
model RolePermission {
  roleId       String
  permissionId String
  assignedAt   DateTime @default(now())

  role       Role       @relation(fields: [roleId], references: [id], onDelete: Cascade)
  permission Permission @relation(fields: [permissionId], references: [id], onDelete: Cascade)

  @@id([roleId, permissionId])
  @@map("role_permissions")
}